

class sklearn.linear_model.LinearRegression(fit_intercept=True, normalize=False, copy_X=True, n_jobs=None)

from sklearn.linear_model import LinearRegression as LR
from sklearn.model_selection import train_test_split
from sklearn.model_selection import cross_val_score
from sklearn.datasets import fetch_california_housing as fch
import pandas as pd

housevalue = fch()
X=pd.DataFrame(housevalue.data)
print(X)
X.shape
y=housevalue.target
y.min()
y.max()
housevalue.feature_names
X.columns
X.columns=housevalue.feature_names
X.head()
#70% train, 30% test
Xtrain, Xtest, Ytrain, Ytest = train_test_split(X,y, test_sze=0.3, random_state=430)
#recover index
for i in [Xtrain, Xtest]:
  i.index=range(i.shape[0])
Xtest.head()
Xtrain.head()

#create model
reg=LR(normalize=True).fit(Xtrain, Ytrain)
yhat=reg.predict(Xtest)
yhat.min()
yhat.max()

#w 
reg.coef_
reg.intercept_
[*zip(Xtrain.columns, reg.coef_)]

#result
AveBedrms > MedInc > Latitude > Longtitude



#evaluation 1
from sklearn.metrics import mean_squared_error as MSE
MSE(yhat, Ytest)
Ytest.mean()



cross_val_score(reg, X, y, cv=10, scoring="neg_mean_squared_error")*(-1)
cross_val_score(reg, X, y, cv=10, scoring="neg_mean_squared_error").mean()

import sklearn
sorted(sklearn.metrics. SCORERS.Keys())


#evaluation 2
from sklearn.metrics import r2_score
r2_score(Ytest, yhat)
r2_score(y_true=Ytest, y_pred=yhat)

r2=reg.score(Xtest, Ytest)

cross_val_score(reg, X, y, cv=10, scoring="r2").mean()

#show
import matplotlib.pyplot as plt
sorted(Ytest)
plt.plot(range(len(Ytest)), sorted(Ytest), c="black", label="Data")
plt.plot(range(len(yhat)), sorted(yhat), c="red", label="Predict")
plt.legend()
plt.show()










